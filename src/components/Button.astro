---
import type { HTMLAttributes } from 'astro/types';
type Props = HTMLAttributes<'a'> & {
	stretch?: boolean;
	type?: 'primary' | 'secondary' | 'outln';
};

const {
	href,
	class: className,
	type = 'primary',
	stretch = false,
	...props
} = Astro.props;
---

<a
	href={href}
	class:list={[
		'button text-lg select-none outline-none min-w-14 sm:w-fit h-14 flex p-4 items-center justify-center rounded cursor-pointer',
		className,
		type,
		{ 'w-full': stretch },
	]}
	{...props}
	><span> <slot /></span>
</a>

<style>
	a.button {
		background-color: var(--r-bg-color);
		transition: transform 0.55s var(--bezier);
		color: var(--r-color);
	}
	a.button:focus-visible {
		outline: 1px solid var(--bg-hover);
	}
	a.secondary:focus-visible,
	a.outln:focus-visible {
		outline: 1px solid var(-r-color);
	}
	a.button:hover {
		background-color: var(--bg-hover);
		--scale: 1.05;
		transform: scale3d(var(--scale), var(--scale), 1);
	}
	a.button > span {
		transition: transform 0.55s var(--bezier);
	}
	a.button:hover > span {
		--scale-reverse: calc(1 / var(--scale));
		transform: scale3d(var(--scale-reverse), var(--scale-reverse), 1);
	}
	.primary {
		--r-color: var(--r-em-color);
		--bg-hover: var(--gray-800);
	}
	.secondary {
		--r-color: black;
		--bg-hover: var(--gray-200);
		--r-bg-color: var(--gray-100);
	}
	.outln {
		--r-bg-color: transparent;
		--r-color: black;
		--bg-hover: var(--gray-200);
		border: 1px solid var(-r-color);
	}
	:global(.dark) a {
		--bg-hover: var(--gray-200);
	}
	:global(.dark) .outln {
		--r-bg-color: transparent;
		--r-color: var(--white);
		--bg-hover: var(--gray-800);
	}
	:global(.dark) .secondary {
		--r-color: var(--white);
		--bg-hover: var(--gray-900);
		--r-bg-color: var(--gray-800);
	}
</style>
